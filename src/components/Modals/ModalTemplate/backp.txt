"use client"


import React, { useState, ChangeEvent, Dispatch, SetStateAction } from "react";
import { AiFillFolderOpen } from "react-icons/ai";
import api from "@/services/api";
import toast from "react-hot-toast";

interface CustomModalProps {
  id: string;
  phone: string;
  name: string;
  text: string;
  active: boolean;
  type: string;
  interaction: number;

  onRequestClose: () => void;
  inputValue: string;
  setInputValue: Dispatch<SetStateAction<string>>;
  selectedImage: File | null;
  setSelectedImage: Dispatch<SetStateAction<File | null>>;
}

const CustomModalTemplate: React.FC<CustomModalProps> = ({
  id,
  phone,
  name,
  text,
  active,
  type,
  interaction,
  onRequestClose,
  inputValue,
  setInputValue,
  selectedImage,
  setSelectedImage,
}) => {
  const [isActive, setIsActive] = useState(active);
  const [selectedType, setSelectedType] = useState(type);
  const [selectedText, setSelectedText] = useState(text);

  const handleImageChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    setSelectedImage(file || null);
  };

  const sendMessageTemplate = async () => {
    try {
      const toastId = toast.loading("Enviando mensagem...");
  
      const formData = new FormData();
      const templateData = {
        id,
        phone,
        name,
        // image:'teste.jpg',
        type: selectedType,
        text: selectedText,
        active: isActive,
        interaction,
      };

      // Adiciona campos ao FormData a partir do objeto templateData
      Object.entries(templateData).forEach(([key, value]) => {
        formData.append(`template[${key}]`, value);
      });

      // Adiciona a imagem, se existir
      if (selectedImage) {
        formData.append("image", selectedImage, selectedImage.name);
      }
  
      console.log('form', formData);
  
      const response = await api.put(`Barberteste/Template/${id}`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });
      console.log('saiu do form', response);
  
      toast.dismiss(toastId);
      console.log("Resposta da rota do WhatsApp:", response.data);
  
      onRequestClose();
    } catch (error) {
      toast.error("Falha ao atualizar a lista");
      console.error("Erro ao enviar mensagem para o WhatsApp:", error);
    }
  };

  return (
    <div
      className="fixed top-0 left-0 right-0 bottom-0 flex  items-center justify-center p-5 bg-[#000]"
      style={{ zIndex: 99999 }}
    >
      <div
        className="h-[80%] overflow-y-auto"
        style={{ backgroundColor: "rgb(0 0 0 / 99%)" }}
      >
        <div className="h-20 bg-black-2">
          <button
            className="bg-meta-3sv text-white p-2 cursor-pointer hover:bg-blue-700 mb-2 rounded-full"
            onClick={onRequestClose}
          >
            Fechar
          </button>
        </div>
        <div
          className="w-[550px] h-auto bg-white p-5"
          style={{
            backgroundSize: 300,
            backgroundColor: "rgba(255,255,255,0.12)",
          }}
        >
          <div className="text-gray-600 mb-5 text-white">
            <div className="text-gray-600 mb-5 h-auto p-4 text-sm text-white bg-bgmessage">
              <p>ID: {id}</p>
              <p className="text-white">
                Nome:<span className="text-meta-3sv font-bold"> {name}</span>
              </p>
              <p className="text-white">
                Contato:<span className="text-success font-bold"> {phone}</span>
              </p>
              <p className="text-white">
                Mensagem Personalizada:
                <span className="text-meta-3sv"> {text}</span>
              </p>
              <div className="flex justify-start items-start font-bold">
                Total Mensagem enviadas:
                <span className="pl-2 text-meta-3sv font-bold">
                  {" "}
                  {interaction}
                </span>
              </div>
              <div className="flex justify-start items-start font-bold">
                Total Mensagem enviadas:
                <span className="pl-2 text-meta-3sv font-bold">
                  {" "}
                  {active == true ? "true" : "desativado"}
                </span>
              </div>
            </div>

            <div className=" mb-5 text-white">
              <label htmlFor="imageInput">Selecione uma imagem:</label>
              <input
                type="file"
                id="imageInput"
                accept="image/*"
                onChange={handleImageChange}
                className="mb-5"
              />
            </div>
            <div className=" mb-5 text-white">
              <label htmlFor="typeInput">name:</label>
              <input
                type="text"
                value={name}
                onChange={(e) => {}}
                className="w-full h-auto py-2 mb-5 bg-white text-black-2"
              />
            </div>
            <div className=" mb-5 text-white">
              <label htmlFor="typeInput">Tipo:</label>
              <input
                type="text"
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
                className="w-full h-auto py-2 mb-5 bg-white text-black-2"
              />
            </div>

            <div className=" mb-5 text-white">
              {" "}
              <label htmlFor="phoneInput">Telefone:</label>
              <input
                type="text"
                value={phone}
                onChange={(e) => {}}
                className="w-full h-auto py-2 mb-5 bg-white text-black-2"
              />
            </div>

            <div className=" mb-5 text-white">
              {" "}
              <label htmlFor="interactionInput">Interacao:</label>
              <input
                type="number"
                value={interaction}
                onChange={(e) => {}}
                className="w-full h-auto py-2 mb-5 bg-white text-black-2"
              />
            </div>

            <div className=" mb-5 text-white">
              {" "}
              <label htmlFor="activeInput">Ativo:</label>
              <input
                type="checkbox"
                checked={isActive}
                onChange={(e) => setIsActive(e.target.checked)}
                className="mb-5"
              />
            </div>
            
            <div className="flex items-center ps-4 border border-gray-200 rounded dark:border-gray-700">
    <input checked={isActive}
    onChange={(e) => setIsActive(e.target.checked)}
    id="bordered-checkbox-2" type="checkbox" value="" name="bordered-checkbox" className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"/>
    <label htmlFor="bordered-checkbox-2" className="w-full py-4 ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">{isActive == true ? "ativo" :'bloqueado'}</label>
</div>

            <div className=" mb-5 text-white">
              <label htmlFor="textInput">Texto:</label>
              <textarea
                value={selectedText}
                onChange={(e) => setSelectedText(e.target.value)}
                className="w-full h-20 mb-5 bg-white text-black-2"
              />
            </div>
          </div>

          <button
            className="bg-meta-3sv text-white p-2 cursor-pointer hover:bg-blue-700 mb-2 rounded-full"
            onClick={onRequestClose}
          >
            Fechar
          </button>

          <button
            className="bg-success text-white p-2 cursor-pointer hover:bg-green-700 rounded-full"
            onClick={sendMessageTemplate}
          >
            <AiFillFolderOpen /> Alterar template
          </button>
        </div>
      </div>
    </div>
  );
};

export default CustomModalTemplate;

        fileuploadform.append("phone", dados.phone);
        fileuploadform.append("name", dados.name);
        fileuploadform.append("text", dados.text);
        fileuploadform.append("interaction", dados.interaction);
        fileuploadform.append("active", isActive);